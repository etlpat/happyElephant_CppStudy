#include<iostream>
using namespace std;
#include<string>



// (逻辑结构)
// 【线性表】 (linear list)
// 
//
// (1)基本概念
//	线性表：n个相同类型的数据元素构成的有限序列
//  
// 
// (2)专业术语
//	a1：表头元素
//	an：表尾元素
//	位序：位序=下标+1，表示当前是第几个元素
//	前驱/后继：每个中间元素ai都有且仅有一个直接前驱和一个直接后继
//	
// 
//
// (3)基本操作
// (创建、销毁、增删改查...)
//	必备操作：
//	1.initList(&L)：初始化表。创建空表，为其分配内存空间
//	2.destroyList(&L)：销毁表。释放内存空间
//	3.listInsert(&L, i, e)：插入元素。在第i个位置插入元素e
//	4.ListDelete(&L, i, &e)：删除元素。删除第i个元素，并返回给引用变量
//	5.LocateElem(L, e)：按值查找。在表L中查找指定元素的下标
//	6.GetElem(L, i)：按位查找。获取表中第i个元素的值
//	其他常用操作：
//	7.Length(L)：返回表长
//	8.PrintList(L)：按顺序输出表中元素
//	9.Empty(L)：判断表是否位空
//	......
//
//
//
// (4)应用场景
//	已知：顺序表不好扩容，增删效率低，查找效率高
//		  链表好扩容，增删效率高，查找效率低
//	场景：当表长难以预估，并经常进行增删操作，就用链表实现
//		  当表长可预估且相对固定，查询操作较多，就用顺序表实现
