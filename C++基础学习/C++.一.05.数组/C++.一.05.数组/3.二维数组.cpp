#include <iostream>
using namespace std;



////// 二维数组
//
// 二维数组的定义方式：
// 1.数据类型 数组名[行数][列数];
// 2.数据类型 数组名[行数][列数] = { {元素1, 元素2 }, {元素3, 元素4} };
// 3.数据类型 数组名[行数][列数] = { 元素1, 元素2, 元素3, 元素4 };
// 4.数据类型 数组名[][列数] = { 元素1, 元素2, 元素3, 元素4 };
//
// 注意：1.二维数组的定义可以省略行，不能省略列
//		 2.若空间剩余会自动补0


//int main()
//{
//	int arr1[3][4];
//
//	int arr2[3][4] = { {1,2,3,4},{1,2,3},{1} };
//	//1 2 3 4	// 如下，剩余空间自动补0
//	//1 2 3 0
//	//1 0 0 0
//
//	int arr3[3][4] = { 1,2,3,4,5,6 };
//	//1 2 3 4
//	//5 6 0 0
//	//0 0 0 0
//	
//	int arr4[][4] = { 1,2,3,4,5,6 };
//	//1 2 3 4
//	//5 6 0 0
//
//	system("pause");
//	return 0;
//}






////// 二维数组的数组名
//
// 首先明确一个概念：【二维数组的每一行视作一个元素】
//					  即二维数组的元素是一维数组
// 
// 
// 二维数组的数组名含义和之前完全相同（首元素地址和两个特例）
// 以二维数组int arr[3][3]为例：
// 数组名arr是【首元素地址】，即【第一行一维数组的地址】
// sizeof(arr)：整个二维数组的大小
// &arr：整个二维数组的地址，跨度是数组整体大小
//
// 
// 区分：
// arr是二维数组首元素地址，即第一个数组的地址
// arr[0]是第一个数组(名)，即第一行一维数组的首元素地址


//int main()
//{
//	int arr[2][2] = { 0 };
//	cout << sizeof(arr) << endl;// 16
//	
//	// arr[0]表示第一行一维数组的首元素地址
//	cout << arr[0] << endl;//	0000006E280FF998
//	cout << arr[0]+1 << endl;//	0000006E280FF99C，相差4字节
//	
//	// arr表示第一行一维数组整体的地址
//	cout << arr << endl;//		0000006E280FF998
//	cout << arr+1 << endl;//	0000006E280FF9A0，相差8字节
//	
//	// &aee表示二维数组整体的地址
//	cout << &arr << endl;//		0000006E280FF998
//	cout << &arr+1 << endl;//	0000006E280FF9A8，相除16字节
//
//	return 0;
//}




//// 练习：输出二维数组的数据，并输出每行数据的和
//int main()
//{
//	int arr[3][3] = { 75,64,84,95,82,63,79,85,89 };
//	for (int i = 0; i < 3; i++) {
//		int sum = 0;
//		for (int j = 0; j < 3; j++) {
//			cout << arr[i][j] << " ";
//			sum += arr[i][j];
//		}
//		cout << "该行数据和为：" << sum << endl;
//	}
//	system("pause");
//	return 0;
//}
