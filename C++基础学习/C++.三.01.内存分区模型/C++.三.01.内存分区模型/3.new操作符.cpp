#include<iostream>
using namespace std;



//// new操作符：
// new操作符：用于在堆内存中动态分配内存空间。
// new操作符会返回堆区空间的首地址
//
// (1)创建单个变量 int* p = int(值);
// (2)创建一个数组 int* p = int[数组大小];


// delete操作符：手动释放堆区的内存空间
// 
// (1)释放单个变量 delete p; 
// (1)释放一个数组 delete[] p; 








//// （1）利用new创建单个变量：
// 语法： 指针类型 指针变量 = new 数据类型(变量的值)
// e.g. int* p = new int(10)
//      表示在堆区开辟了一个整形空间，值是10，返回地址p
// 
// 注意：小括号10表示整形的值是10


//float* func()
//{
//	float* p = new float(2.333);
//	return p;
//}
//
//int main()
//{
//	float* pf = func();
//	// 需要用指针pf接收的原因是：虽然new开辟的空间在堆区，没有作用域限制。但是堆区数据需要通过指针变量访问
//	//                           指针变量是栈区数据，p出了函数会被释放，所以需要用pf接收才能继续访问堆区数据
//
//	cout << *pf << endl;// 2.333
//	
//	delete pf;// 释放堆区空间
//
//	//cout << *pf << endl;// 报错，堆区数据已经被释放，不可非法访问
//}








//// （2）利用new在堆区开辟数组
// 语法：指针类型 指针变量 = new 数组类型
// e.g. int* p = new int[10]
//      表示在堆区开辟了10个连续的整形空间，首地址是p
// 
// 数组类型：int arr[10]表示一个整形数组，数组arr的类型是int[10]


//int main()
//{
//	// 在堆区创建了一个数组
//	int* arr = new int[5];
//
//	for (int i = 0; i < 5; i++) {
//		arr[i] = i + 1;
//	}
//
//
//	for (int i = 0; i < 5; i++) {
//		cout << arr[i] << " ";// 1 2 3 4 5
//	}
//
//	delete[] arr;// 释放堆区数组（要加[]）
//
//	//cout << arr[0] << endl;// 报错，空间已释放，不可访问
//
//
//	return 0;
//}
