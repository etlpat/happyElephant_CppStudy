#include <iostream>
using namespace std;



//// 值传递（传值调用）
// 所谓值传递，就是函数在调用时，实参将数值传入给形参
//		形参只有其所在函数【被调用时】才会去实例化（分配内存空间），
//		函数调用完成后，形参所在空间被【自动销毁】，平时不占用空间。
//		即“形参是实参的临时拷贝”
// 形参只是数值和实参相同，但是地址不同。【在函数中直接改变形参不会影响实参】
//
//
// 地址传递（传址调用）：
// 当形参是地址时，可以在函数内通过地址修改主函数中的数据
// 解释：当形参是地址，实参和形参的值相同，指向同一个变量，可以在函数内通过地址修改变量；
//					   但是形参和实参地址不同，仅代表该变量存在两个二级指针，与修改变量的值无关


//void swap1(int a, int b)// 传值调用
//{
//	int tmp = a;
//	a = b;
//	b = tmp;
//}
//
//void swap2(int *a, int *b)// 传址调用
//{
//	int tmp = *a;
//	*a = *b;
//	*b = tmp;
//}
//
//int main()
//{
//	int a = 3, b = 4;
//	cout << "a=" << a << ", b=" << b << endl;// a=3, b=4
//
//	swap1(a, b);
//	cout << "a=" << a << ", b=" << b << endl;// a=3, b=4
//	// 传值调用时，在函数内交换形参，不影响实参
//
//	swap2(&a, &b);
//	cout << "a=" << a << ", b=" << b << endl;// a=4, b=3
//	// 传址调用时，函数内通过地址修改ab，ab的值改变
//
//	system("pause");
//	return 0;
//}