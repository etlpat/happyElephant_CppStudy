#include<iostream>
using namespace std;
#include<string>




//// 成员变量和成员函数是分开存储的
//
// C++中，类内成员变量和成员函数是分开存储的
// 只有非静态的成员变量才占对象的内存空间，静态成员变量和函数都不占对象空间
//
//
// 注意：1.对象的大小等于【类中所有非静态成员变量大小的总和】
//		 2.成员变量是无论什么访问权限，都存放在对象中（就算对象无法访问私有变量，它也是存放在对象中）
//		 3.若对象中不包含非静态成员变量，则系统默认将该对象大小设为1，目的是为了区对象所在内存中的位置





//class C1
//{
//	int a;// 非静态成员变量，属于类的对象上
//};
//
//void test1()
//{
//	C1 c1;
//	cout << sizeof(c1) << endl;// 4
//	// 对象大小等于非静态成员变量的大小
//}
//
//
//
//class C2
//{
//	int a;
//
//	static int b;	// 静态成员变量，不属于类的对象
//	void func1() {}	// 成员函数，不属于类的对象
//	static void func2() {}	// 静态成员函数，不属于类的对象
//};
//
//void test2()
//{
//	C2 c2;
//	cout << sizeof(c2) << endl;// 4
//	// 对象大小等于非静态成员变量的大小
//}
//
//
//
//class C3
//{ };
//
//class C4 {
//	void func() {}
//	static int a;
//};
//
//void test3()
//{
//	C3 c3;
//	C4 c4;
//	cout << sizeof(c3) << endl;// 1
//	cout << sizeof(c4) << endl;// 1
//	// 注意：没有非静态成员变量的类对象和空类的对象都占 1 字节
//	// C++编译器会给每个空对象默认分配一个字节空间，目的是为区分空对象占内存的位置。
//	// 若不是空(没有非静态成员变量)对象，就不会分配这个字节
//}
//
//
//
//int main()
//{
//	test1();
//	test2();
//	test3();
//
//	return 0;
//}
