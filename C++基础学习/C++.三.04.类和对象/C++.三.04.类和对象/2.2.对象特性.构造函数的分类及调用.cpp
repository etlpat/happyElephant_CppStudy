#include<iostream>
using namespace std;
#include<string>




//// 构造函数的分类及调用
//
// 【两种分类方式】：
// 1.按参数分：有参构造 和 无参构造(默认构造)
// 2.按类型分：普通构造 和 拷贝构造
// 
// 注意：1.一个类中可以同时重载多种构造方法
//		 2.普通构造就是除了拷贝构造以外的其他构造函数
//		 3.拷贝构造函数：参数是该类对象的引用（如const Person& p），将一个对象的属性拷贝到自己身上
// 
//
// 
// 
// 
// 【三种调用方法】：（在创建对象时同时调用构造函数）
// 1.括号法（常用）
// 2.显式法
// 3.隐式转换法
// 
// 语法：
// 括号法语法：类名 对象名(参数);			如：Person p("张三", 18);
// 显式法语法：类名 对象名 = 类名(参数);	如：Person p = Person("张三", 18);// 这里等号右边的写法和匿名对象相同。匿名对象：执行完所在行后，系统会立即回收匿名对象
// 隐式转换法语法：类名 对象名 = 参数;		如：Person p = {"张三", 18};
//
// 
// 注意：1.括号法调用无参构造函数时，对象名后不要加()
//		   错误写法：Person p(); 编译器会将这行代码视为函数的声明
// 
//       2.不能利用拷贝构造函数初始化匿名对象
//         错误写法：Person(p); 编译器认为 Person(p) == Person p，相当于再次定义对象p，类型重定义





//class Person
//{
//public:
//	string name;
//	int age;
//
//	// 可以用不同的形参使构造函数重载
//
//	Person() {// 无参构造
//		cout << "无参构造函数调用" << endl;
//	}
//
//	Person(string s, int a) {// 有参构造
//		name = s;
//		age = a;
//		cout << "有参构造函数调用" << endl;
//	}
//
//	Person(const Person& p) {// 拷贝构造：参数是该类对象的引用，将一个对象的属性拷贝到自己身上
//		name = p.name;
//		age = p.age;
//		cout << "拷贝构造函数调用" << endl;
//	}
//
//	~Person() {
//		cout << "析构函数调用" << endl;
//	}
//};
//
//
//void test1()// 1.括号法调用构造函数
//			// 语法：类名 对象名(参数列表);
//{
//	Person p1;// 无参构造
//	Person p2("张三", 18);// 有参构造
//	Person p3(p2);// 拷贝构造
//
//	cout << "p2：" << p2.name << ", " << p2.age << endl;// p2：张三, 18
//	cout << "p3：" << p3.name << ", " << p3.age << endl;// p3：张三, 18
//
//	// 注意：括号法调用无参析构函数时，对象名后不要加()
//	Person p4();// 编译器会将这行代码视为函数的声明。
//}
//
//
//void test2()// 2.显式法调用构造函数
//			// 语法：类名 对象名 = 类名(参数列表);
//{
//	Person p1;// 无参构造
//	Person p2 = Person("李四", 20);// 有参构造
//	Person p3 = Person(p2);// 拷贝构造
//
//	cout << "p2：" << p2.name << ", " << p2.age << endl;// p2：李四, 20
//	cout << "p3：" << p3.name << ", " << p3.age << endl;// p3：李四, 20
//
//
//	// 显示构造法，等号右边的是一个匿名对象
//	Person("李四", 20);// 匿名对象   特点：执行完本行后，系统会立即回收匿名对象
//
//	// 注意：不能利用拷贝构造函数初始化匿名对象
//	//Person(p3);// 报错：类型重定义（因为编译器认为Person(p3) == Person p3，相当于再次定义p3）
//}
//
//
//void test3()// 3.隐式转换法调用构造函数
//			// 语法：类名 对象名 = 参数
//{
//	Person p1;
//	Person p2 = {"王五", 32};// 把结构体{"王五", 32}强制转换为Person类型赋给p2，相当于Person p2 = Person("王五", 32);
//	Person p3 = p2;
//
//	cout << "p2：" << p2.name << ", " << p2.age << endl;// p2：王五, 32
//	cout << "p3：" << p3.name << ", " << p3.age << endl;// p3：王五, 32
//}
//
//
//int main()
//{
//	test1();// 括号法调用析构函数
//
//	test2();// 显式法调用构造函数
//
//	test3();// 隐式转换法调用构造函数
//
//	return 0;
//}