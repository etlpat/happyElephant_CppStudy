#include<iostream>
using namespace std;
#include<string>



//// 对象的初始化和清理
// 对象的初始化和清理是两个非常重要的安全问题
//	1.对象或变量若未初始化，会造成数据错误、未定义行为等问题
//	2.对象或变量未及时清理，会造成内存泄漏、野指针等问题




//// 构造函数和析构函数（在类中）
// （分别对应对象的初始化和清理）
//
// C++利用构造函数和析构函数解决上述问题，这两个函数由编译器自动调用
// 构造和析构是必须有的实现，若我们自己不提供，编译器会自动提供这两个函数的空实现（函数参数和函数体都为空）
//
//
// 构造函数：创建对象时为对象的成员属性初始化赋值，由编译器自动调用
// 析构函数：对象销毁前，系统自动调用，执行清理工作





// (1)构造函数语法：类名(参数列表){...}
// 注意：
// 1.构造函数，没有返回类型
// 2.函数名与类名相同
// 3.构造函数可以有参数，因此可以发生重载
// 4.程序在创建对象时会自动调用构造，而且只调用一次


// (2)析构函数语法：~类名(){...}
// 注意：
// 1.析构函数，没有返回类型
// 2.函数名与类名相同，在名称前加上~
// 3.析构函数不可以有参数
// 4.程序在对象销毁前会自动调用析构，而且只调用一次


// 注意：自己创建的构造和析构函数一定要放在public权限下
//		 若误将构造函数放在protected或private权限，创建函数时自动调用构造，但是由于这些权限不能在类外访问，所以不能创建。





//class Person
//{
//public:
//	Person() {// 构造函数
//		cout << "构造函数调用" << " ";
//	}
//
//	~Person() {// 析构函数
//		cout << "析构函数调用" << endl;
//	}
//};
//
//void test() {
//	Person p;// p对象在栈上，函数执行结束空间自动释放
//}
//
//int main()
//{
//	test();// 构造函数调用 析构函数调用
//
//	Person p;// 构造函数调用（构造函数在对象初始化时调用）
//
//	system("pause");// 请按任意键继续. . .
//	return 0;// 析构函数调用（析构函数在对象销毁时调用）
//}

