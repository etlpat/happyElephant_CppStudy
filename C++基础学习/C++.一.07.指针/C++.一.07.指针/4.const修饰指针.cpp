#include<iostream>
using namespace std;



//// const修饰指针
// 三种情况：
// 1.const修饰指针（常量指针）
//	【const int* p = a;】-- 指针指向的值不可修改，但是指针的指向可以修改。
// 
// 2.const修饰常量（指针常量）
//	【int* const p = a;】-- 指针的指向不可修改，但是指针指向的值可以修改。
// 
// 3.const即修饰指针，又修饰常量
//	【const int* const p = a;】-- 指针的指向和指针指向的值都不可以改
//
//
// 记忆方式：【const"后面"限定的内容不可修改】
// 1.const int* p;
// 叫法：先const后int*，所以叫“常量(的)指针”
// 作用：const后面的是*p，所以*p(指向的值)不可以改，但是地址(p)本身可改
//
// 2.int* const p;
// 叫法：先int*后const，所以叫“指针(是)常量”
// 作用：const后面的是p，所以p(地址)不可改，指针指向的值(*p)可以改
//
//
//
// 【常量指针：是指针，指向的内容是常量】
// 【指针常量：是常量，常量的类型是指针】



//int main()
//{
//	// 1.常量指针
//	int a = 10, b = 10;
//	const int* p1 = &a;
//	//*p1 = 20;// 报错
//	p1 = &b;
//
//
//	// 2.指针常量
//	a = 10, b = 10;
//	int* const p2 = &a;
//	*p2 = 20;
//	//p2 = &b;// 报错
//
//
//	// 3.const即修饰指针又修饰常量
//	a = 10, b = 10;
//	const int* const p3 = &a;
//	//*p3 = 20;// 报错
//	//p3 = &b;// 报错
//
//
//
//	system("pause");
//	return 0;
//}





